// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @unique @db.Text

  isOnline Boolean @default(false)

  servers  Server[]
  members  Member[]
  channels Channel[]

  callsInitiated Call[] @relation("Caller")
  callsReceived  Call[] @relation("Callee")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST

  @@map("MemberRole")
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  Server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  directMessages DirectMessage[]
  messages       Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false) // soft delete for messages6+++

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  calls          Call[]
  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false) // soft delete for messages

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([conversationId])
  @@index([memberId])
}

model Call {
  id String @id @unique @default(uuid())

  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  serverId String?

  callerId String?
  caller   Profile? @relation("Caller", fields: [callerId], references: [id], onDelete: Cascade)

  calleeId String?
  callee   Profile? @relation("Callee", fields: [calleeId], references: [id], onDelete: Cascade)

  isAccepted Boolean @default(false)
  isRejected Boolean @default(false)
  isCanceled Boolean @default(false)
  isMissed   Boolean @default(false)

  isEnded Boolean   @default(false)
  endedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  callLogId String?  @unique
  callLog   CallLog?

  @@index([conversationId])
  @@index([serverId])
  @@index([callerId])
  @@index([calleeId])
  @@index([callLogId])
}

model CallLog {
  id String @id @default(uuid())

  callType String
  duration DateTime

  callId String @unique
  call   Call   @relation(fields: [callId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([callId])
}
